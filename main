import os
import sys
import base64
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding, hashes, hmac
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

class AESCipher:
    def __init__(self, key=None, password=None):
        """Initialize with a key or generate one from a password"""
        self.backend = default_backend()
        if key:
            # Use provided key
            self.key = key
        elif password:
            # Derive key from password
            salt = os.urandom(16)
            self.salt = salt
            # Key derivation function
            kdf = self._password_to_key(password, salt)
            self.key = kdf[:32]  # Use 256-bit key
    
    def _password_to_key(self, password, salt):
        """Convert a password to a cryptographic key using PBKDF2"""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=self.backend
        )
        return kdf.derive(password.encode())
    
    def encrypt_file(self, input_file_path, output_file_path=None):
        """Encrypt a file using AES-256-GCM"""
        if not output_file_path:
            output_file_path = input_file_path + '.encrypted'
        
        # Generate a random 96-bit IV (recommended for GCM)
        iv = os.urandom(12)
        
        # Create an encryptor object
        encryptor = Cipher(
            algorithms.AES(self.key),
            modes.GCM(iv),
            backend=self.backend
        ).encryptor()
        
        # Read file and encrypt
        with open(input_file_path, 'rb') as file:
            plaintext = file.read()
        
        # Encrypt the data
        ciphertext = encryptor.update(plaintext) + encryptor.finalize()
        
        # Get the authentication tag
        tag = encryptor.tag
        
        # Write the salt (if derived from password), IV, tag, and ciphertext to the output file
        with open(output_file_path, 'wb') as file:
            if hasattr(self, 'salt'):
                file.write(self.salt)
            file.write(iv)
            file.write(tag)
            file.write(ciphertext)
        
        return output_file_path
    
    def decrypt_file(self, input_file_path, output_file_path=None):
        """Decrypt a file using AES-256-GCM"""
        if not output_file_path:
            if input_file_path.endswith('.encrypted'):
                output_file_path = input_file_path.replace('.encrypted', '.decrypted')
            else:
                output_file_path = input_file_path + '.decrypted'
        
        with open(input_file_path, 'rb') as file:
            # Read the salt, IV, tag, and ciphertext
            if hasattr(self, 'salt'):
                file_salt = file.read(16)
                # If using a provided key, we need to check the salt matches
                if hasattr(self, 'salt') and self.salt != file_salt:
                    raise ValueError("Salt doesn't match. Wrong password or corrupted file.")
            
            iv = file.read(12)
            tag = file.read(16)
            ciphertext = file.read()
        
        # Create a decryptor object
        decryptor = Cipher(
            algorithms.AES(self.key),
            modes.GCM(iv, tag),
            backend=self.backend
        ).decryptor()
        
        # Decrypt the data
        try:
            plaintext = decryptor.update(ciphertext) + decryptor.finalize()
        except Exception as e:
            raise Exception(f"Decryption failed: {e}")
        
        # Write the decrypted data to the output file
        with open(output_file_path, 'wb') as file:
            file.write(plaintext)
        
        return output_file_path

class AESEncryptionGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("AES Encryption Tool")
        self.root.geometry("600x450")
        self.root.resizable(True, True)
        
        # Create style
        self.style = ttk.Style()
        self.style.configure("TFrame", background="#f0f0f0")
        self.style.configure("TButton", padding=6, relief="flat", background="#ccc")
        self.style.configure("TLabel", background="#f0f0f0", font=('Arial', 10))
        self.style.configure("Header.TLabel", font=('Arial', 12, 'bold'))
        
        # Main frame
        self.main_frame = ttk.Frame(root, padding="20 20 20 20")
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        ttk.Label(self.main_frame, text="AES File Encryption/Decryption", style="Header.TLabel").grid(
            column=0, row=0, columnspan=3, sticky=tk.W, pady=(0, 20))
        
        # Input file section
        ttk.Label(self.main_frame, text="Input File:").grid(column=0, row=1, sticky=tk.W, pady=5)
        self.input_file_var = tk.StringVar()
        self.input_entry = ttk.Entry(self.main_frame, textvariable=self.input_file_var, width=50)
        self.input_entry.grid(column=1, row=1, padx=5, pady=5, sticky=tk.W)
        ttk.Button(self.main_frame, text="Browse...", command=self.browse_input_file).grid(
            column=2, row=1, sticky=tk.W, padx=5, pady=5)
        
        # Output file section
        ttk.Label(self.main_frame, text="Output File:").grid(column=0, row=2, sticky=tk.W, pady=5)
        self.output_file_var = tk.StringVar()
        self.output_entry = ttk.Entry(self.main_frame, textvariable=self.output_file_var, width=50)
        self.output_entry.grid(column=1, row=2, padx=5, pady=5, sticky=tk.W)
        ttk.Button(self.main_frame, text="Browse...", command=self.browse_output_file).grid(
            column=2, row=2, sticky=tk.W, padx=5, pady=5)
        
        # Authentication method
        ttk.Label(self.main_frame, text="Authentication:").grid(column=0, row=3, sticky=tk.W, pady=5)
        self.auth_method = tk.StringVar(value="password")
        self.password_radio = ttk.Radiobutton(
            self.main_frame, text="Password", variable=self.auth_method, value="password", 
            command=self.toggle_auth_method)
        self.password_radio.grid(column=1, row=3, sticky=tk.W, padx=5, pady=5)
        self.key_radio = ttk.Radiobutton(
            self.main_frame, text="Base64 Key", variable=self.auth_method, value="key", 
            command=self.toggle_auth_method)
        self.key_radio.grid(column=1, row=3, sticky=tk.E, padx=5, pady=5)
        
        # Password input
        ttk.Label(self.main_frame, text="Password:").grid(column=0, row=4, sticky=tk.W, pady=5)
        self.password_var = tk.StringVar()
        self.password_entry = ttk.Entry(self.main_frame, textvariable=self.password_var, show='*', width=50)
        self.password_entry.grid(column=1, row=4, padx=5, pady=5, sticky=tk.W+tk.E)
        self.show_password_var = tk.BooleanVar(value=False)
        self.show_password_check = ttk.Checkbutton(
            self.main_frame, text="Show", variable=self.show_password_var, command=self.toggle_password_visibility)
        self.show_password_check.grid(column=2, row=4, sticky=tk.W, padx=5, pady=5)
        
        # Confirm password input
        ttk.Label(self.main_frame, text="Confirm Password:").grid(column=0, row=5, sticky=tk.W, pady=5)
        self.confirm_password_var = tk.StringVar()
        self.confirm_password_entry = ttk.Entry(self.main_frame, textvariable=self.confirm_password_var, show='*', width=50)
        self.confirm_password_entry.grid(column=1, row=5, padx=5, pady=5, sticky=tk.W+tk.E)
        
        # Key input
        ttk.Label(self.main_frame, text="Base64 Key:").grid(column=0, row=6, sticky=tk.W, pady=5)
        self.key_var = tk.StringVar()
        self.key_entry = ttk.Entry(self.main_frame, textvariable=self.key_var, width=50)
        self.key_entry.grid(column=1, row=6, padx=5, pady=5, sticky=tk.W+tk.E)
        self.key_entry.config(state=tk.DISABLED)
        self.show_key_var = tk.BooleanVar(value=False)
        self.show_key_check = ttk.Checkbutton(
            self.main_frame, text="Show", variable=self.show_key_var, command=self.toggle_key_visibility)
        self.show_key_check.grid(column=2, row=6, sticky=tk.W, padx=5, pady=5)
        self.show_key_check.config(state=tk.DISABLED)
        
        # Operation buttons
        self.button_frame = ttk.Frame(self.main_frame)
        self.button_frame.grid(column=0, row=7, columnspan=3, pady=20)
        
        ttk.Button(self.button_frame, text="Encrypt", command=self.encrypt_file, width=15).grid(
            column=0, row=0, padx=10)
        ttk.Button(self.button_frame, text="Decrypt", command=self.decrypt_file, width=15).grid(
            column=1, row=0, padx=10)
        ttk.Button(self.button_frame, text="Generate Key", command=self.generate_key, width=15).grid(
            column=2, row=0, padx=10)
        ttk.Button(self.button_frame, text="Clear", command=self.clear_fields, width=15).grid(
            column=3, row=0, padx=10)
        
        # Status bar
        self.status_var = tk.StringVar()
        self.status_bar = ttk.Label(
            root, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Initialize
        self.toggle_auth_method()
        self.set_status("Ready")
    
    def set_status(self, message):
        self.status_var.set(message)
        self.root.update_idletasks()
    
    def toggle_auth_method(self):
        if self.auth_method.get() == "password":
            self.password_entry.config(state=tk.NORMAL)
            self.confirm_password_entry.config(state=tk.NORMAL)
            self.show_password_check.config(state=tk.NORMAL)
            self.key_entry.config(state=tk.DISABLED)
            self.show_key_check.config(state=tk.DISABLED)
        else:
            self.password_entry.config(state=tk.DISABLED)
            self.confirm_password_entry.config(state=tk.DISABLED)
            self.show_password_check.config(state=tk.DISABLED)
            self.key_entry.config(state=tk.NORMAL)
            self.show_key_check.config(state=tk.NORMAL)
    
    def toggle_password_visibility(self):
        if self.show_password_var.get():
            self.password_entry.config(show='')
            self.confirm_password_entry.config(show='')
        else:
            self.password_entry.config(show='*')
            self.confirm_password_entry.config(show='*')
    
    def toggle_key_visibility(self):
        if self.show_key_var.get():
            self.key_entry.config(show='')
        else:
            self.key_entry.config(show='*')
    
    def browse_input_file(self):
        filename = filedialog.askopenfilename(
            title="Select a file",
            filetypes=(("All files", "*.*"),)
        )
        if filename:
            self.input_file_var.set(filename)
            # Suggest output filename based on operation
            basename = os.path.basename(filename)
            if basename.endswith('.encrypted'):
                suggested_output = filename.replace('.encrypted', '.decrypted')
            else:
                suggested_output = filename + '.encrypted'
            self.output_file_var.set(suggested_output)
    
    def browse_output_file(self):
        filename = filedialog.asksaveasfilename(
            title="Save as",
            filetypes=(("All files", "*.*"),)
        )
        if filename:
            self.output_file_var.set(filename)
    
    def generate_key(self):
        # Generate a random key and display as base64
        key = os.urandom(32)  # 256-bit key
        key_b64 = base64.b64encode(key).decode('utf-8')
        
        self.auth_method.set("key")
        self.toggle_auth_method()
        self.key_var.set(key_b64)
        
        # Also copy to clipboard
        self.root.clipboard_clear()
        self.root.clipboard_append(key_b64)
        
        messagebox.showinfo(
            "Key Generated", 
            "A new 256-bit key has been generated and copied to clipboard."
        )
    
    def validate_inputs(self, operation):
        # Check input file
        input_file = self.input_file_var.get().strip()
        if not input_file:
            messagebox.showerror("Error", "Please select an input file")
            return False
        
        if not os.path.isfile(input_file):
            messagebox.showerror("Error", "Input file does not exist")
            return False
        
        # Check authentication
        if self.auth_method.get() == "password":
            password = self.password_var.get()
            confirm_password = self.confirm_password_var.get()
            
            if not password:
                messagebox.showerror("Error", "Please enter a password")
                return False
            
            if password != confirm_password:
                messagebox.showerror("Error", "Passwords do not match")
                return False
        else:  # Key-based auth
            key_b64 = self.key_var.get().strip()
            if not key_b64:
                messagebox.showerror("Error", "Please enter a base64 key or generate one")
                return False
            
            try:
                key = base64.b64decode(key_b64)
                if len(key) != 32:  # Must be 256 bits (32 bytes)
                    messagebox.showerror("Error", "Key must be 32 bytes (256 bits) when decoded")
                    return False
            except Exception as e:
                messagebox.showerror("Error", f"Invalid base64 key: {str(e)}")
                return False
        
        return True
    
    def encrypt_file(self):
        if not self.validate_inputs("encrypt"):
            return
        
        try:
            input_file = self.input_file_var.get().strip()
            output_file = self.output_file_var.get().strip()
            
            # Initialize cipher
            if self.auth_method.get() == "password":
                cipher = AESCipher(password=self.password_var.get())
            else:
                key = base64.b64decode(self.key_var.get().strip())
                cipher = AESCipher(key=key)
            
            self.set_status("Encrypting file...")
            result_path = cipher.encrypt_file(input_file, output_file)
            
            self.set_status(f"File encrypted successfully: {result_path}")
            messagebox.showinfo("Success", f"File encrypted successfully:\n{result_path}")
            
        except Exception as e:
            self.set_status(f"Encryption failed: {str(e)}")
            messagebox.showerror("Encryption Failed", str(e))
    
    def decrypt_file(self):
        if not self.validate_inputs("decrypt"):
            return
        
        try:
            input_file = self.input_file_var.get().strip()
            output_file = self.output_file_var.get().strip()
            
            # Initialize cipher
            if self.auth_method.get() == "password":
                cipher = AESCipher(password=self.password_var.get())
            else:
                key = base64.b64decode(self.key_var.get().strip())
                cipher = AESCipher(key=key)
            
            self.set_status("Decrypting file...")
            result_path = cipher.decrypt_file(input_file, output_file)
            
            self.set_status(f"File decrypted successfully: {result_path}")
            messagebox.showinfo("Success", f"File decrypted successfully:\n{result_path}")
            
        except Exception as e:
            self.set_status(f"Decryption failed: {str(e)}")
            messagebox.showerror("Decryption Failed", str(e))
    
    def clear_fields(self):
        self.input_file_var.set("")
        self.output_file_var.set("")
        self.password_var.set("")
        self.confirm_password_var.set("")
        self.key_var.set("")
        self.auth_method.set("password")
        self.toggle_auth_method()
        self.set_status("Ready")

if __name__ == "__main__":
    root = tk.Tk()
    app = AESEncryptionGUI(root)
    root.mainloop()