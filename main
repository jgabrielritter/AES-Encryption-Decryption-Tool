import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding, hashes, hmac
from cryptography.hazmat.backends import default_backend
from getpass import getpass
import base64
import argparse
import sys

class AESCipher:
    def __init__(self, key=None):
        """Initialize with a key or generate one from a password"""
        self.backend = default_backend()
        if key:
            # Use provided key
            self.key = key
        else:
            # Derive key from password
            password = getpass("Enter encryption password: ")
            salt = os.urandom(16)
            self.salt = salt
            # Key derivation function
            kdf = self._password_to_key(password, salt)
            self.key = kdf[:32]  # Use 256-bit key
    
    def _password_to_key(self, password, salt):
        """Convert a password to a cryptographic key using PBKDF2"""
        from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
        
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=self.backend
        )
        return kdf.derive(password.encode())
    
    def encrypt_file(self, input_file_path, output_file_path=None):
        """Encrypt a file using AES-256-GCM"""
        if not output_file_path:
            output_file_path = input_file_path + '.encrypted'
        
        # Generate a random 96-bit IV (recommended for GCM)
        iv = os.urandom(12)
        
        # Create an encryptor object
        encryptor = Cipher(
            algorithms.AES(self.key),
            modes.GCM(iv),
            backend=self.backend
        ).encryptor()
        
        # Read file and encrypt
        with open(input_file_path, 'rb') as file:
            plaintext = file.read()
        
        # Encrypt the data
        ciphertext = encryptor.update(plaintext) + encryptor.finalize()
        
        # Get the authentication tag
        tag = encryptor.tag
        
        # Write the salt (if derived from password), IV, tag, and ciphertext to the output file
        with open(output_file_path, 'wb') as file:
            if hasattr(self, 'salt'):
                file.write(self.salt)
            file.write(iv)
            file.write(tag)
            file.write(ciphertext)
        
        print(f"File encrypted successfully: {output_file_path}")
        return output_file_path
    
    def decrypt_file(self, input_file_path, output_file_path=None):
        """Decrypt a file using AES-256-GCM"""
        if not output_file_path:
            output_file_path = input_file_path.replace('.encrypted', '.decrypted')
        
        with open(input_file_path, 'rb') as file:
            # Read the salt, IV, tag, and ciphertext
            if hasattr(self, 'salt'):
                file_salt = file.read(16)
                # If using a provided key, we need to check the salt matches
                if hasattr(self, 'salt') and self.salt != file_salt:
                    raise ValueError("Salt doesn't match. Wrong password or corrupted file.")
            
            iv = file.read(12)
            tag = file.read(16)
            ciphertext = file.read()
        
        # Create a decryptor object
        decryptor = Cipher(
            algorithms.AES(self.key),
            modes.GCM(iv, tag),
            backend=self.backend
        ).decryptor()
        
        # Decrypt the data
        try:
            plaintext = decryptor.update(ciphertext) + decryptor.finalize()
        except Exception as e:
            print(f"Decryption failed: {e}")
            print("This could be due to an incorrect password, corrupted file, or tampering.")
            sys.exit(1)
        
        # Write the decrypted data to the output file
        with open(output_file_path, 'wb') as file:
            file.write(plaintext)
        
        print(f"File decrypted successfully: {output_file_path}")
        return output_file_path

def main():
    parser = argparse.ArgumentParser(description="AES File Encryption/Decryption Tool")
    parser.add_argument("-e", "--encrypt", help="Encrypt the specified file", action="store_true")
    parser.add_argument("-d", "--decrypt", help="Decrypt the specified file", action="store_true")
    parser.add_argument("-i", "--input", help="Input file path", required=True)
    parser.add_argument("-o", "--output", help="Output file path (optional)")
    parser.add_argument("-k", "--key", help="Base64 encoded key (if not provided, will prompt for password)")
    
    args = parser.parse_args()
    
    # Check if a key was provided
    if args.key:
        key = base64.b64decode(args.key)
        cipher = AESCipher(key)
    else:
        cipher = AESCipher()
    
    if args.encrypt:
        cipher.encrypt_file(args.input, args.output)
    elif args.decrypt:
        cipher.decrypt_file(args.input, args.output)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()